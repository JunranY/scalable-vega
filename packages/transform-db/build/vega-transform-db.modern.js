import{inherits as t,Transform as e,ingest as r}from"vega";const s=require("querystring");function n(t){e.call(this,[],t)}require("http"),n.type=function(t){return"Serverless"==t?(this._type=t,this):(this._type="Server",this._type)},n.setHttpOptions=function(t){return t?(this._httpOptions=t,this):this._httpOptions},n.QueryFunction=function(t){return t?(this._QueryFunction=t,this):this._QueryFunction},n.Definition={type:"dbtransform",metadata:{changes:!0,source:!0},params:[{name:"query",type:"string",required:!0}]},t(n,e).transform=async function(t,e){if(!n._httpOptions&&!n._QueryFunction)throw Error("Core session or http option is missing. Please assign it to the Vega transform");var o;if("Serverless"==n._type)e.dataflow.info(`DuckDB Core Query: ${t.query}`),o=await n._QueryFunction(t.query);else{if("Server"!=n._type)throw Error("Core type hasn't been assigned. Please assign it to the Vega transform");{const e=async function(){const e=n._httpOptions,r=await fetch(e.url,{method:e.method,mode:e.mode,headers:e.headers,body:s.stringify({query:t.query})});if(r.ok)return await r.json();{const t=await r.json();throw Error((t.error+": "+t.message).replace(/(\r\n|\n|\r)/gm,""))}};try{o=await e()}catch(t){console.log(t)}}}o.forEach(r);const i=e.fork(e.NO_FIELDS&e.NO_SOURCE);return i.rem=this.value,this._argval.toArray&&(o=[o[0].min,o[0].max]),this.value=i.add=i.source=o,i};export{n as default};
//# sourceMappingURL=vega-transform-db.modern.js.map
