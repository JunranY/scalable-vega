{"version":3,"file":"vega-transform-db.modern.js","sources":["../index.js"],"sourcesContent":["import { inherits, ingest, Transform } from \"vega\";\nconst querystring = require('querystring');\nconst http = require('http');\n\n/**\n * Generates a function to query data from a database.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.query - The SQL query.\n */\nexport default function VegaTransformDB(params) {\n  Transform.call(this, [], params);\n}\n\n/**\n * Set the Core session.\n * @param {*} QueryFunction\n * @param {*} type //Serverless or Server\n * @param {*} setHttpOptions\n */\n\n VegaTransformDB.type = function(type) {\n  if (type == \"Serverless\") {\n    this._type = type;\n    return this;\n  }\n  else {\n    this._type = \"Server\";\n  }\n  return this._type;\n};\n\n\nVegaTransformDB.setHttpOptions = function (httpOptions) {\n  if (httpOptions) {\n    this._httpOptions = httpOptions;\n    return this;\n  }\n  return this._httpOptions;\n};\n\nVegaTransformDB.QueryFunction = function(query_function) {\n  if (query_function) {\n    this._QueryFunction = query_function;\n    return this;\n  }\n\n  return this._QueryFunction;\n};\n\nVegaTransformDB.Definition = {\n  type: \"dbtransform\",\n  metadata: { changes: true, source: true },\n  params: [{ name: \"query\", type: \"string\", required: true }]\n};\n\nconst prototype = inherits(VegaTransformDB, Transform);\n\nprototype.transform = async function(_, pulse) {\n  if (!VegaTransformDB._httpOptions && !VegaTransformDB._QueryFunction) {\n    throw Error(\n      \"Core session or http option is missing. Please assign it to the Vega transform\"\n    );\n  }\n  var result;\n  if (VegaTransformDB._type=='Serverless'){\n    pulse.dataflow.info(`DuckDB Core Query: ${_.query}`);\n    result = await VegaTransformDB._QueryFunction(_.query);\n  }\n  else if (VegaTransformDB._type=='Server'){    \n    const postQuery = async function () {\n      const options = VegaTransformDB._httpOptions\n      const response = await fetch(options.url, {\n        method: options.method,\n        mode: options.mode,\n        headers: options.headers,\n        body: querystring.stringify({\n          query: _.query\n        })\n      });\n  \n      // fetch wonâ€™t reject on HTTP error status even if the response\n      // is an HTTP 404 or 500. Instead, it will resolve normally with\n      // ok status set to false\n      if (response.ok)\n        return await response.json();\n      else {\n        // capture the error message\n        const err = await response.json();\n        throw Error(\n          (err.error + ': ' + err.message).replace(/(\\r\\n|\\n|\\r)/gm, \"\")\n        );\n      }\n    };\n  \n    try {\n      result = await postQuery();\n    } catch (error) {\n      console.log(error);\n    }\n  \n  }\n  else {\n    throw Error(\n      \"Core type hasn't been assigned. Please assign it to the Vega transform\"\n    );\n  }\n\n  result.forEach(ingest);\n  const out = pulse.fork(pulse.NO_FIELDS & pulse.NO_SOURCE);\n  out.rem = this.value;\n\n  if (this._argval.toArray) {\n    // changing the result format for Extent transform\n    // [{min:10, max, 100}] -> [10, 100]\n    const temp = [result[0].min, result[0].max]\n    result = temp\n  }\n  this.value = out.add = out.source = result;\n  return out;\n};\n"],"names":["querystring","require","VegaTransformDB","params","Transform","call","this","type","_type","setHttpOptions","httpOptions","_httpOptions","QueryFunction","query_function","_QueryFunction","Definition","metadata","changes","source","name","required","inherits","transform","async","_","pulse","Error","result","dataflow","info","query","postQuery","options","response","fetch","url","method","mode","headers","body","stringify","ok","json","err","error","message","replace","console","log","forEach","ingest","out","fork","NO_FIELDS","NO_SOURCE","rem","value","_argval","toArray","min","max","add"],"mappings":"2DACA,MAAMA,EAAcC,QAAQ,wBASJC,EAAgBC,GACtCC,EAAUC,KAAKC,KAAM,GAAIH,GATdF,QAAQ,QAmBpBC,EAAgBK,KAAO,SAASA,GAC/B,MAAY,cAARA,GACFD,KAAKE,MAAQD,SAIbD,KAAKE,MAAQ,cAEHA,QAIdN,EAAgBO,eAAiB,SAAUC,GACzC,OAAIA,GACFJ,KAAKK,aAAeD,aAGVC,cAGdT,EAAgBU,cAAgB,SAASC,GACvC,OAAIA,GACFP,KAAKQ,eAAiBD,aAIZC,gBAGdZ,EAAgBa,WAAa,CAC3BR,KAAM,cACNS,SAAU,CAAEC,SAAS,EAAMC,QAAQ,GACnCf,OAAQ,CAAC,CAAEgB,KAAM,QAASZ,KAAM,SAAUa,UAAU,KAGpCC,EAASnB,EAAiBE,GAElCkB,UAAYC,eAAeC,EAAGC,GACtC,IAAKvB,EAAgBS,eAAiBT,EAAgBY,eACpD,MAAMY,MACJ,kFAGJ,IAAIC,EACJ,GAA2B,cAAvBzB,EAAgBM,MAClBiB,EAAMG,SAASC,KAAM,sBAAqBL,EAAEM,SAC5CH,QAAezB,EAAgBY,eAAeU,EAAEM,eAElB,UAAvB5B,EAAgBM,MAkCvB,MAAMkB,MACJ,0EAnCqC,CACvC,MAAMK,EAAYR,iBAChB,MAAMS,EAAU9B,EAAgBS,aAC1BsB,QAAiBC,MAAMF,EAAQG,IAAK,CACxCC,OAAQJ,EAAQI,OAChBC,KAAML,EAAQK,KACdC,QAASN,EAAQM,QACjBC,KAAMvC,EAAYwC,UAAU,CAC1BV,MAAON,EAAEM,UAOb,GAAIG,EAASQ,GACX,aAAaR,EAASS,OACnB,CAEH,MAAMC,QAAYV,EAASS,OAC3B,MAAMhB,OACHiB,EAAIC,MAAQ,KAAOD,EAAIE,SAASC,QAAQ,iBAAkB,OAKjE,IACEnB,QAAeI,IACf,MAAOa,GACPG,QAAQC,IAAIJ,KAUhBjB,EAAOsB,QAAQC,GACf,MAAMC,EAAM1B,EAAM2B,KAAK3B,EAAM4B,UAAY5B,EAAM6B,WAU/C,OATAH,EAAII,IAAMjD,KAAKkD,MAEXlD,KAAKmD,QAAQC,UAIf/B,EADa,CAACA,EAAO,GAAGgC,IAAKhC,EAAO,GAAGiC,MAGzCtD,KAAKkD,MAAQL,EAAIU,IAAMV,EAAIjC,OAASS,EAC7BwB"}