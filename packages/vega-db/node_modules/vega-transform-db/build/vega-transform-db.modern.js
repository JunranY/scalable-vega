import{inherits as t,Transform as r,ingest as s}from"vega";const o=require("querystring");function e(t){r.call(this,[],t)}require("http"),e.setHttpOptions=function(t){return t?(this._httpOptions=t,this):this._httpOptions},e.Definition={type:"dbtransform",metadata:{changes:!0,source:!0},params:[{name:"relation",type:"string",required:!0}]},t(e,r).transform=async function(t,r){if(console.log(this),!e._httpOptions)throw Error("Vega Transform Postgres http options missing. Assign it with setHttpOptions.");if(!this._query)throw Error("Internal error: this._query should be defined");let i=[];try{this._sql=this._query(this,this._argval.from),console.log(this._sql),i=await async function(t){const r=e._httpOptions,s=await fetch(r.url,{method:r.method,mode:r.mode,headers:r.headers,body:o.stringify({query:t})});if(s.ok)return await s.json();{const t=await s.json();throw Error((t.error+": "+t.message).replace(/(\r\n|\n|\r)/gm,""))}}(this._sql)}catch(t){console.log(t)}i.forEach(s);const n=r.fork(r.NO_FIELDS&r.NO_SOURCE);return n.rem=Array.isArray(this.value)?this.value:[],console.log(n),"Extent"===this.__proto__.constructor.Definition.type&&(i=[i[0].min,i[0].max]),this.value=n.add=n.source=i,n};export{e as default};
//# sourceMappingURL=vega-transform-db.modern.js.map
