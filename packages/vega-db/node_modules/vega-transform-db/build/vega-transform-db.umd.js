!function(e,r){"object"==typeof exports&&"undefined"!=typeof module?module.exports=r(require("vega")):"function"==typeof define&&define.amd?define(["vega"],r):(e||self).VegaTransformPostgres=r(e.vega)}(this,function(e){var r=require("querystring");function t(r){e.Transform.call(this,[],r)}return require("http"),t.setHttpOptions=function(e){return e?(this._httpOptions=e,this):this._httpOptions},t.Definition={type:"dbtransform",metadata:{changes:!0,source:!0},params:[{name:"relation",type:"string",required:!0}]},e.inherits(t,e.Transform).transform=function(o,n){try{var s=this,i=function(){a.forEach(e.ingest);var r=n.fork(n.NO_FIELDS&n.NO_SOURCE);return r.rem=Array.isArray(s.value)?s.value:[],console.log(r),"Extent"===s.__proto__.constructor.Definition.type&&(a=[a[0].min,a[0].max]),s.value=r.add=r.source=a,r};if(console.log(s),!t._httpOptions)throw Error("Vega Transform Postgres http options missing. Assign it with setHttpOptions.");if(!s._query)throw Error("Internal error: this._query should be defined");var a=[],u=function(e,r){try{var t=e()}catch(e){return r(e)}return t&&t.then?t.then(void 0,r):t}(function(){return s._sql=s._query(s,s._argval.from),console.log(s._sql),Promise.resolve(function(e){try{var o=t._httpOptions;return Promise.resolve(fetch(o.url,{method:o.method,mode:o.mode,headers:o.headers,body:r.stringify({query:e})})).then(function(e){return e.ok?Promise.resolve(e.json()):Promise.resolve(e.json()).then(function(e){throw Error((e.error+": "+e.message).replace(/(\r\n|\n|\r)/gm,""))})})}catch(e){return Promise.reject(e)}}(s._sql)).then(function(e){a=e})},function(e){console.log(e)});return Promise.resolve(u&&u.then?u.then(i):i())}catch(e){return Promise.reject(e)}},t});
//# sourceMappingURL=vega-transform-db.umd.js.map
