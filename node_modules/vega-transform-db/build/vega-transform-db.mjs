import{inherits as r,Transform as t,ingest as e}from"vega";var o=require("querystring");function n(r){t.call(this,[],r)}require("http"),n.setHttpOptions=function(r){return r?(this._httpOptions=r,this):this._httpOptions},n.Definition={type:"dbtransform",metadata:{changes:!0,source:!0},params:[{name:"relation",type:"string",required:!0}]},r(n,t).transform=function(r,t){try{var s=this,i=function(){a.forEach(e);var r=t.fork(t.NO_FIELDS&t.NO_SOURCE);return r.rem=Array.isArray(s.value)?s.value:[],console.log(r),"Extent"===s.__proto__.constructor.Definition.type&&(a=[a[0].min,a[0].max]),s.value=r.add=r.source=a,r};if(console.log(s),!n._httpOptions)throw Error("Vega Transform Postgres http options missing. Assign it with setHttpOptions.");if(!s._query)throw Error("Internal error: this._query should be defined");var a=[],u=function(r,t){try{var e=r()}catch(r){return t(r)}return e&&e.then?e.then(void 0,t):e}(function(){return s._sql=s._query(s,s._argval.from),console.log(s._sql),Promise.resolve(function(r){try{var t=n._httpOptions;return Promise.resolve(fetch(t.url,{method:t.method,mode:t.mode,headers:t.headers,body:o.stringify({query:r})})).then(function(r){return r.ok?Promise.resolve(r.json()):Promise.resolve(r.json()).then(function(r){throw Error((r.error+": "+r.message).replace(/(\r\n|\n|\r)/gm,""))})})}catch(r){return Promise.reject(r)}}(s._sql)).then(function(r){a=r})},function(r){console.log(r)});return Promise.resolve(u&&u.then?u.then(i):i())}catch(r){return Promise.reject(r)}};export{n as default};
//# sourceMappingURL=vega-transform-db.mjs.map
